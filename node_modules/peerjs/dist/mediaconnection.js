"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var eventemitter3_1 = require("eventemitter3");
var negotiator_1 = require("./negotiator");
function MediaConnection(peer, provider, options) {
    if (!(this instanceof MediaConnection))
        return new MediaConnection(peer, provider, options);
    eventemitter3_1.EventEmitter.call(this);
    this.options = util_1.util.extend({}, options);
    this.open = false;
    this.type = "media";
    this.peer = peer;
    this.provider = provider;
    this.metadata = this.options.metadata;
    this.localStream = this.options._stream;
    this.id =
        this.options.connectionId || MediaConnection._idPrefix + util_1.util.randomToken();
    if (this.localStream) {
        negotiator_1.Negotiator.startConnection(this, {
            _stream: this.localStream,
            originator: true
        });
    }
}
exports.MediaConnection = MediaConnection;
util_1.util.inherits(MediaConnection, eventemitter3_1.EventEmitter);
MediaConnection._idPrefix = "mc_";
MediaConnection.prototype.addStream = function (remoteStream) {
    util_1.util.log("Receiving stream", remoteStream);
    this.remoteStream = remoteStream;
    this.emit("stream", remoteStream);
};
MediaConnection.prototype.handleMessage = function (message) {
    var payload = message.payload;
    switch (message.type) {
        case "ANSWER":
            negotiator_1.Negotiator.handleSDP(message.type, this, payload.sdp);
            this.open = true;
            break;
        case "CANDIDATE":
            negotiator_1.Negotiator.handleCandidate(this, payload.candidate);
            break;
        default:
            util_1.util.warn("Unrecognized message type:", message.type, "from peer:", this.peer);
            break;
    }
};
MediaConnection.prototype.answer = function (stream) {
    if (this.localStream) {
        util_1.util.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");
        return;
    }
    this.options._payload._stream = stream;
    this.localStream = stream;
    negotiator_1.Negotiator.startConnection(this, this.options._payload);
    var messages = this.provider._getMessages(this.id);
    for (var i = 0, ii = messages.length; i < ii; i += 1) {
        this.handleMessage(messages[i]);
    }
    this.open = true;
};
MediaConnection.prototype.close = function () {
    if (!this.open) {
        return;
    }
    this.open = false;
    negotiator_1.Negotiator.cleanup(this);
    this.emit("close");
};
//# sourceMappingURL=mediaconnection.js.map