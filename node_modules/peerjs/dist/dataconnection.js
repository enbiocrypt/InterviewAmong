"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var eventemitter3_1 = require("eventemitter3");
var negotiator_1 = require("./negotiator");
var reliable_1 = require("reliable");
function DataConnection(peer, provider, options) {
    if (!(this instanceof DataConnection))
        return new DataConnection(peer, provider, options);
    eventemitter3_1.EventEmitter.call(this);
    this.options = util_1.util.extend({
        serialization: "binary",
        reliable: false
    }, options);
    this.open = false;
    this.type = "data";
    this.peer = peer;
    this.provider = provider;
    this.id =
        this.options.connectionId || DataConnection._idPrefix + util_1.util.randomToken();
    this.label = this.options.label || this.id;
    this.metadata = this.options.metadata;
    this.serialization = this.options.serialization;
    this.reliable = this.options.reliable;
    this._buffer = [];
    this._buffering = false;
    this.bufferSize = 0;
    this._chunkedData = {};
    if (this.options._payload) {
        this._peerBrowser = this.options._payload.browser;
    }
    negotiator_1.Negotiator.startConnection(this, this.options._payload || {
        originator: true
    });
}
exports.DataConnection = DataConnection;
util_1.util.inherits(DataConnection, eventemitter3_1.EventEmitter);
DataConnection._idPrefix = "dc_";
DataConnection.prototype.initialize = function (dc) {
    this._dc = this.dataChannel = dc;
    this._configureDataChannel();
};
DataConnection.prototype._configureDataChannel = function () {
    var self = this;
    if (util_1.util.supports.sctp) {
        this._dc.binaryType = "arraybuffer";
    }
    this._dc.onopen = function () {
        util_1.util.log("Data channel connection success");
        self.open = true;
        self.emit("open");
    };
    if (!util_1.util.supports.sctp && this.reliable) {
        this._reliable = new reliable_1.Reliable(this._dc, util_1.util.debug);
    }
    if (this._reliable) {
        this._reliable.onmessage = function (msg) {
            self.emit("data", msg);
        };
    }
    else {
        this._dc.onmessage = function (e) {
            self._handleDataMessage(e);
        };
    }
    this._dc.onclose = function (e) {
        util_1.util.log("DataChannel closed for:", self.peer);
        self.close();
    };
};
DataConnection.prototype._handleDataMessage = function (e) {
    var self = this;
    var data = e.data;
    var datatype = data.constructor;
    if (this.serialization === "binary" || this.serialization === "binary-utf8") {
        if (datatype === Blob) {
            util_1.util.blobToArrayBuffer(data, function (ab) {
                data = util_1.util.unpack(ab);
                self.emit("data", data);
            });
            return;
        }
        else if (datatype === ArrayBuffer) {
            data = util_1.util.unpack(data);
        }
        else if (datatype === String) {
            var ab = util_1.util.binaryStringToArrayBuffer(data);
            data = util_1.util.unpack(ab);
        }
    }
    else if (this.serialization === "json") {
        data = JSON.parse(data);
    }
    if (data.__peerData) {
        var id = data.__peerData;
        var chunkInfo = this._chunkedData[id] || {
            data: [],
            count: 0,
            total: data.total
        };
        chunkInfo.data[data.n] = data.data;
        chunkInfo.count += 1;
        if (chunkInfo.total === chunkInfo.count) {
            delete this._chunkedData[id];
            data = new Blob(chunkInfo.data);
            this._handleDataMessage({ data: data });
        }
        this._chunkedData[id] = chunkInfo;
        return;
    }
    this.emit("data", data);
};
DataConnection.prototype.close = function () {
    if (!this.open) {
        return;
    }
    this.open = false;
    negotiator_1.Negotiator.cleanup(this);
    this.emit("close");
};
DataConnection.prototype.send = function (data, chunked) {
    if (!this.open) {
        this.emit("error", new Error("Connection is not open. You should listen for the `open` event before sending messages."));
        return;
    }
    if (this._reliable) {
        this._reliable.send(data);
        return;
    }
    var self = this;
    if (this.serialization === "json") {
        this._bufferedSend(JSON.stringify(data));
    }
    else if (this.serialization === "binary" ||
        this.serialization === "binary-utf8") {
        var blob = util_1.util.pack(data);
        var needsChunking = util_1.util.chunkedBrowsers[this._peerBrowser] ||
            util_1.util.chunkedBrowsers[util_1.util.browser];
        if (needsChunking && !chunked && blob.size > util_1.util.chunkedMTU) {
            this._sendChunks(blob);
            return;
        }
        if (!util_1.util.supports.sctp) {
            util_1.util.blobToBinaryString(blob, function (str) {
                self._bufferedSend(str);
            });
        }
        else if (!util_1.util.supports.binaryBlob) {
            util_1.util.blobToArrayBuffer(blob, function (ab) {
                self._bufferedSend(ab);
            });
        }
        else {
            this._bufferedSend(blob);
        }
    }
    else {
        this._bufferedSend(data);
    }
};
DataConnection.prototype._bufferedSend = function (msg) {
    if (this._buffering || !this._trySend(msg)) {
        this._buffer.push(msg);
        this.bufferSize = this._buffer.length;
    }
};
DataConnection.prototype._trySend = function (msg) {
    try {
        this._dc.send(msg);
    }
    catch (e) {
        this._buffering = true;
        var self = this;
        setTimeout(function () {
            self._buffering = false;
            self._tryBuffer();
        }, 100);
        return false;
    }
    return true;
};
DataConnection.prototype._tryBuffer = function () {
    if (this._buffer.length === 0) {
        return;
    }
    var msg = this._buffer[0];
    if (this._trySend(msg)) {
        this._buffer.shift();
        this.bufferSize = this._buffer.length;
        this._tryBuffer();
    }
};
DataConnection.prototype._sendChunks = function (blob) {
    var blobs = util_1.util.chunk(blob);
    for (var i = 0, ii = blobs.length; i < ii; i += 1) {
        var blob = blobs[i];
        this.send(blob, true);
    }
};
DataConnection.prototype.handleMessage = function (message) {
    var payload = message.payload;
    switch (message.type) {
        case "ANSWER":
            this._peerBrowser = payload.browser;
            negotiator_1.Negotiator.handleSDP(message.type, this, payload.sdp);
            break;
        case "CANDIDATE":
            negotiator_1.Negotiator.handleCandidate(this, payload.candidate);
            break;
        default:
            util_1.util.warn("Unrecognized message type:", message.type, "from peer:", this.peer);
            break;
    }
};
//# sourceMappingURL=dataconnection.js.map